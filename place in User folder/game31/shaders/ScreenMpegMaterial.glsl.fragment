
#ifdef GL_ES
#define LOWP lowp
precision mediump float;
#else
#define LOWP 
#endif

varying vec2 v_texCoords;

uniform sampler2D u_texture;
uniform sampler2D u_noiseTexture;

uniform float u_time; 		// used to be time
uniform float u_power; 
uniform float u_lsdMix;
uniform float u_aspectRatio;


vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d)), d / q.x, q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
	vec2 blockSize = vec2(0.05, 0.05 * u_aspectRatio);
	vec2 uv_noise = floor(v_texCoords / blockSize) * blockSize;
	uv_noise += floor(vec2(u_time) * vec2(12.0, 35.0)) / vec2(64);
	uv_noise = fract(uv_noise);
	
	float block_thresh = fract(u_time * 8.0) * 0.025 * u_power;
	float line_thresh = fract(u_time * 4.0) * 0.2 * u_power;
	
	vec2 uv_r = v_texCoords, uv_g = v_texCoords, uv_b = v_texCoords;
    
    vec4 noise1 = texture2D(u_noiseTexture, uv_noise);    
    vec4 noise2 = texture2D(u_noiseTexture, vec2(uv_noise.y, 0.0));

	// glitch some blocks and lines
    float condition = floor(((min(block_thresh / noise1.r, 1.0) + min(line_thresh / noise2.g, 1.0)) / 2.0) + 0.5);
	
    vec2 dist = (uv_noise - 0.5) * 0.3 * condition;
    uv_r += dist * 0.1;
    uv_g += dist * 0.2;
    uv_b += dist * 0.125;

	vec4 fragColor = vec4(1.0, 1.0, 1.0, 1.0);

	// Lookup
	fragColor.r = texture2D(u_texture, fract(uv_r)).r;
	fragColor.g = texture2D(u_texture, fract(uv_g)).g;
	fragColor.b = texture2D(u_texture, fract(uv_b)).b;
	
	// LSD Effect
	vec3 color = rgb2hsv(fragColor.rgb);
	color.x = mod(((fragColor.x + fragColor.y + fragColor.z) * 0.7) + u_power + u_time, 1.0);
	color.y = 1.0;
	color.z = 1.0 - color.z;
	color = hsv2rgb(color);
	fragColor.rgb = mix(color, fragColor.rgb, u_lsdMix);
    

	// loose luma for some blocks
    condition = floor(min(block_thresh / noise1.g, 1.0));
    fragColor.rgb = mix(fragColor.rgb, fragColor.rrr, condition);
    
	// discolor block lines
    condition = floor(min(line_thresh / (noise2.b * 3.5), 1.0));
    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, dot(fragColor.rgb, vec3(1.0)), 0.0), condition);
	

	// interleave lines in some blocks
    condition = floor(((min(block_thresh / (noise1.g * 1.5), 1.0) + min(line_thresh / (noise2.g * 2.5), 1.0)) / 2.0) + 0.5);
	vec3 mask = fragColor.rgb * vec3(3.0, 0.0, 0.0);
    fragColor.rgb = mix(fragColor.rgb, mask, condition);
	
	gl_FragColor = fragColor;
}